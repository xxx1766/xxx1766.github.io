<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue.js学习</title>
      <link href="/2023/06/13/Vue-js%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/13/Vue-js%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="Attribute绑定"><a href="#Attribute绑定" class="headerlink" title="Attribute绑定"></a>Attribute绑定</h3><p>数据从哪来看什么，调用Vue自己的特殊attribute是需要访问组件的。由 <code>v-</code> 开头的一种特殊 attribute。它们是 Vue 模板语法的一部分。和文本插值类似，指令的值是可以访问组件状态的 JavaScript 表达式。区别如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 class=&quot;title&quot;&gt;Make me red&lt;/h1&gt; &lt;!--  不访问组件 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      titleClass: &#x27;title&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--  需要访问组件 --&gt;</span><br><span class="line">  &lt;h1 :class=&quot;titleClass&quot;&gt;Make me red&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="数组方法filter"><a href="#数组方法filter" class="headerlink" title="数组方法filter"></a>数组方法filter</h3><p>this.todos &#x3D; this.todos.filter((t) &#x3D;&gt; t !&#x3D;&#x3D; todo)</p><h3 id="computed、methods和watch的区别"><a href="#computed、methods和watch的区别" class="headerlink" title="computed、methods和watch的区别"></a>computed、methods和watch的区别</h3><p><a href="https://juejin.cn/post/7201883287936761912">Vue核心知识：computed、methods和watch的区别 ? - 掘金 (juejin.cn)</a></p><p>代码区别：根据选择是否显示已完成的任务<a href="https://cn.vuejs.org/tutorial/#step-8">教程 | Vue.js (vuejs.org)</a></p><p>用methods完成，需要新变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let id = 0</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      newTodo: &#x27;&#x27;,</span><br><span class="line">      hideCompleted: false,</span><br><span class="line">      todos: [</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;</span><br><span class="line">      ],</span><br><span class="line">      tmpTodos:[</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addTodo() &#123;</span><br><span class="line">      this.todos.push(&#123; id: id++, text: this.newTodo, done: false &#125;)</span><br><span class="line">      this.newTodo = &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeTodo(todo) &#123;</span><br><span class="line">      this.todos = this.todos.filter((t) =&gt; t !== todo)</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadTodo() &#123;</span><br><span class="line">      this.hideCompleted = !this.hideCompleted</span><br><span class="line">      if(this.hideCompleted)&#123;</span><br><span class="line">        this.tmpTodos = []</span><br><span class="line">        for(var todo of this.todos)&#123;</span><br><span class="line">          console.log(todo)</span><br><span class="line">          if(!todo.done) &#123;</span><br><span class="line">            this.tmpTodos.push(todo)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.tmpTodos = this.todos</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;newTodo&quot;&gt;</span><br><span class="line">    &lt;button&gt;Add Todo&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;todo in tmpTodos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;</span><br><span class="line">      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;uploadTodo()&quot;&gt;</span><br><span class="line">    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.done &#123;</span><br><span class="line">  text-decoration: line-through;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>用computed实现：return可以直接用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let id = 0</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      newTodo: &#x27;&#x27;,</span><br><span class="line">      hideCompleted: false,</span><br><span class="line">      todos: [</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,</span><br><span class="line">        &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    filteredTodos() &#123;</span><br><span class="line">      return this.hideCompleted</span><br><span class="line">        ? this.todos.filter((t) =&gt; !t.done)</span><br><span class="line">        : this.todos</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addTodo() &#123;</span><br><span class="line">      this.todos.push(&#123; id: id++, text: this.newTodo, done: false &#125;)</span><br><span class="line">      this.newTodo = &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeTodo(todo) &#123;</span><br><span class="line">      this.todos = this.todos.filter((t) =&gt; t !== todo)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;newTodo&quot;&gt;</span><br><span class="line">    &lt;button&gt;Add Todo&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;</span><br><span class="line">      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;</span><br><span class="line">    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.done &#123;</span><br><span class="line">  text-decoration: line-through;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="firstChild和firstElementChild的区别"><a href="#firstChild和firstElementChild的区别" class="headerlink" title="firstChild和firstElementChild的区别"></a>firstChild和firstElementChild的区别</h3><p>它们的共同点都是获取父节点下第一个节点对象。</p><p>但是firstElementChild只会获取元素节点对象，从名称就可以看出来，firstChild则可以获取文本节点对象（当然也可以获取元素节点对象），</p><p>比如空格和换行都被当做文本节点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 知识技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.12-6.18周计划</title>
      <link href="/2023/06/12/6-12-6-18%E5%91%A8%E8%AE%A1%E5%88%92/"/>
      <url>/2023/06/12/6-12-6-18%E5%91%A8%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="总任务"><a href="#总任务" class="headerlink" title="总任务"></a>总任务</h2><ul><li><input disabled="" type="checkbox"> JavaScript基础⅔</li><li><input disabled="" type="checkbox"> 云计算应用调研并汇报</li><li><input disabled="" type="checkbox"> 文献阅读</li><li><input disabled="" type="checkbox"> 毕设指导手册</li><li><input disabled="" type="checkbox"> 组会整理学习</li><li><input disabled="" type="checkbox"> 英语口语单词</li><li><input disabled="" type="checkbox"> 体重</li><li><input disabled="" type="checkbox"> 毕业照（室友和我的）</li><li><input disabled="" type="checkbox"> 周日活动拍摄</li><li><input disabled="" type="checkbox"> 宿舍收拾</li><li><input disabled="" type="checkbox"> 学术咸鱼自救指南</li><li><input disabled="" type="checkbox"> 每日总结</li><li><input disabled="" type="checkbox"> ……</li></ul><h2 id="日计划"><a href="#日计划" class="headerlink" title="日计划"></a>日计划</h2><table><thead><tr><th></th><th>6.12</th><th>6.13</th><th>6.14</th><th>6.15</th><th>6.16</th><th>6.17</th><th>6.18</th></tr></thead><tbody><tr><td>搭建blog</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>英语</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>日语</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>文献阅读</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>读书</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>调研</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>组会&#x2F;汇报</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>写代码</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>java&#x2F;来福</td><td></td><td></td><td></td><td>√</td><td></td><td></td><td></td></tr><tr><td>写好日计划</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>锻炼</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>早睡</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td></tr><tr><td>2升水</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>总结</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="总结签"><a href="#总结签" class="headerlink" title="总结签"></a>总结签</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 周计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习</title>
      <link href="/2023/06/04/JavaScript%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/04/JavaScript%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>参考<a href="https://blog.csdn.net/qq_51604330/article/details/116567496">(254条消息) 教你快速使用VSCode编写HTML文件_vscode html_半生瓜のblog的博客-CSDN博客</a></p><p>完成html在VScode上运行</p><h2 id="JS功能"><a href="#JS功能" class="headerlink" title="JS功能"></a>JS功能</h2><ul><li>直接写入HTML输出流</li><li>对事件的反应</li><li>改变HTML内容</li><li>改变HTML图像</li><li>改变HTML样式</li><li>验证输入</li></ul><h2 id="JS实例"><a href="#JS实例" class="headerlink" title="JS实例"></a>JS实例</h2><p><a href="https://www.runoob.com/js/js-examples.html">JavaScript 实例 | 菜鸟教程 (runoob.com)</a></p><p>对象实例<a href="https://www.runoob.com/js/js-ex-objects.html">JavaScript 对象实例 | 菜鸟教程 (runoob.com)</a></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="开发者工具的使用"><a href="#开发者工具的使用" class="headerlink" title="开发者工具的使用"></a>开发者工具的使用</h3><p><a href="https://zhuanlan.zhihu.com/p/231865779">F12 - 开发者工具详解 - 知乎 (zhihu.com)</a></p><h3 id="显示数据的方式"><a href="#显示数据的方式" class="headerlink" title="显示数据的方式"></a>显示数据的方式</h3><p>JavaScript没有任何打印或者输出的函数</p><p>avaScript 可以通过不同的方式来输出数据：</p><ul><li>使用 <strong>window.alert()</strong> 弹出警告框。</li><li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li><li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li><li>▲使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li></ul><p>注意：console不会打断你页面的操作，如果用alert弹出来内容，那么页面就死了，但是console输出内容后你页面还可以正常操作。</p><p>注意：innerHTML很多情况下都优于document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分。</p><h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h3><p>在 JavaScript 中有 6 种不同的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li><li>symbol</li></ul><p>3 种对象类型：</p><ul><li>Object</li><li>Date</li><li>Array</li></ul><p>2 个不包含任何值的数据类型：</p><ul><li>null</li><li>undefined</li></ul><p>用typeof()函数，但是typeof()函数不能区别array和object，使用Array.isArray()方法或者使用 instanceof 操作符</p><ul><li><a href="https://www.runoob.com/note/26685">JavaScript 判断对象是否为数组</a></li><li><a href="https://www.runoob.com/w3cnote/javascript-check-arrayisobject.html">JavaScript 判断该对象是否为数组</a></li></ul><h3 id="Object的null-和-undefined"><a href="#Object的null-和-undefined" class="headerlink" title="Object的null 和 undefined"></a>Object的null 和 undefined</h3><p><strong>JavaScript 对象是拥有属性和方法的数据</strong></p><p><strong>对象是容器&#x2F;键值对的容器</strong></p><p><strong>注意</strong>：键的类型不一定是字符串，而是字符串或符号，一般类型都是转换成字符串（对象数字等类型），但是符号不会被强制转换。</p><p>在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。</p><p>对象只有被定义才有可能为 null，否则为 undefined。</p><p>如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。</p><p>错误的使用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (myObj !== null &amp;&amp; typeof myObj !== &quot;undefined&quot;) </span><br></pre></td></tr></table></figure><p>正确的方式是我们需要先使用 typeof 来检测对象是否已定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (typeof myObj !== &quot;undefined&quot; &amp;&amp; myObj !== null) </span><br></pre></td></tr></table></figure><h3 id="“helloworld”还是new-String-“helloworld”"><a href="#“helloworld”还是new-String-“helloworld”" class="headerlink" title="“helloworld”还是new String(“helloworld”)"></a>“helloworld”还是new String(“helloworld”)</h3><p>不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用</p><p>BUT 原始值字符串，如 “John”, 没有属性和方法(因为他们不是对象)，原始值可以使用 JavaScript 的属性和方法，因为 JavaScript 在执行方法和属性时可以把原始值当作对象</p><h3 id="转为布尔类型"><a href="#转为布尔类型" class="headerlink" title="转为布尔类型"></a>转为布尔类型</h3><p>其他数据类型转换为布尔类型的规则: <strong>null、undefined、0、NaN、空字符串</strong>转换为<strong>false</strong>，其他转化为 <strong>true</strong></p><h3 id="switch判断"><a href="#switch判断" class="headerlink" title="switch判断"></a>switch判断</h3><p>switch 中 case的判断是&#x3D;&#x3D;&#x3D;的判断，即数据类型和值的双重判断，这点要注意。</p><h3 id="for循环特点"><a href="#for循环特点" class="headerlink" title="for循环特点"></a>for循环特点</h3><p>中间如有某些下标未被使用（即未被赋值），在遍历的时候，采用一般的 for 循环和 for…in 循环得到的结果不同。</p><p>for…in 循环会自动跳过那些没被赋值的元素，而 for 循环则不会，它会显示出 undefined</p><p>for…of功能</p><ul><li><p>循环一个生成器</p></li><li><p>循环一个拥有enumerate属性的对象（普通对象不行，按对象所拥有的属性进行循环，可使用内置的Object.keys()方法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var key of Object.keys(someObject)) &#123;</span><br><span class="line">  console.log(key + &quot;: &quot; + someObject[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环一个DOM collection（？？）</p></li><li><p>循环字符串</p></li><li><p>循环类型化数组</p></li><li><p>循环Map</p></li><li><p>循环Set</p></li></ul><p>4 种循环的适用场景:</p><ul><li><strong>for</strong> : 比较适合遍历数组,字符串等等。</li><li><strong>for in</strong> : 比较适合遍历对象，遍历对象时使用这个再合适不过了。</li><li><strong>while</strong> : while 的话，与 for 的使用场景差不多。唯一不同的是，遍历的条件必须满足。</li><li><strong>do while</strong> : 至少执行一边的循环，遍历数组和字符串也是很方便。</li></ul><h3 id="标签与break、continue"><a href="#标签与break、continue" class="headerlink" title="标签与break、continue"></a>标签与break、continue</h3><p>break 的作用是跳出代码块, 所以 break 可以使用于循环和 switch 等</p><p>continue 的作用是进入下一个迭代, 所以 continue 只能用于循环的代码块。</p><p>代码块: 基本上是｛｝大括号之间</p><p>然后：</p><ol><li>默认标签的情况（除了默认标签情况，其他时候必须要有名标签，否则会有惊喜）</li></ol><p>当 break 和 continue 同时用于循环时，没有加标签，此时默认标签为当前”循环”的代码块。</p><p>当 break 用于 switch 时，默认标签为当前的 switch 代码块:</p><p>有名标签的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cars=[&quot;BMW&quot;,&quot;Volvo&quot;,&quot;Saab&quot;,&quot;Ford&quot;];</span><br><span class="line">list:</span><br><span class="line">&#123;</span><br><span class="line">    document.write(cars[0] + &quot;&quot;);</span><br><span class="line">    document.write(cars[1] + &quot;&quot;);</span><br><span class="line">    document.write(cars[2] + &quot;&quot;);</span><br><span class="line">    break list;</span><br><span class="line">    document.write(cars[3] + &quot;&quot;);</span><br><span class="line">    document.write(cars[4] + &quot;&quot;);</span><br><span class="line">    document.write(cars[5] + &quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述break list;会跳出list的代码块。如果将break换成continue会有惊喜，违反了明确中的第二点，因为list只是个普通代码块，而不是循环。除非list写成如下形式 list:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0; i&lt;10; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    continue list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了标签，可以使用break和continue在多层循环的时候控制外层循环。</p><p>例如下面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">outerloop</span>:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">innerloop</span>:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span> innerloop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span> outerloop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot; j=&quot;</span> + j + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><p>可以使用 constructor 属性来查看对象是否为某某</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">myArray</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> myArray.<span class="property">constructor</span>.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;Array&quot;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><p>字符串转日期：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;2019-12-25&quot;;</span><br><span class="line">// 转换日期格式</span><br><span class="line">str = str.replace(/-/g, &#x27;/&#x27;); // &quot;2010/08/01&quot;;</span><br><span class="line">// 创建日期对象</span><br><span class="line">var date = new Date(str);</span><br><span class="line">反之，日期类型转化为格式化的字符串：</span><br><span class="line"></span><br><span class="line">//完整的格式化  </span><br><span class="line">var time2 = new Date().format(&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">Date.prototype.format = function (fmt) &#123;</span><br><span class="line">    var o = &#123;</span><br><span class="line">        &quot;M+&quot;: this.getMonth() + 1,                 //月份 </span><br><span class="line">        &quot;d+&quot;: this.getDate(),                    //日 </span><br><span class="line">        &quot;h+&quot;: this.getHours(),                   //小时 </span><br><span class="line">        &quot;m+&quot;: this.getMinutes(),                 //分 </span><br><span class="line">        &quot;s+&quot;: this.getSeconds(),                 //秒 </span><br><span class="line">        &quot;q+&quot;: Math.floor((this.getMonth() + 3) / 3), //季度 </span><br><span class="line">        &quot;S&quot;: this.getMilliseconds()             //毫秒 </span><br><span class="line">    &#125;;</span><br><span class="line">    //处理年份</span><br><span class="line">    var reYear = /(y+)/; </span><br><span class="line">    var resultYear = reYear.exec(fmt);</span><br><span class="line">    if (resultYear) </span><br><span class="line">    &#123;</span><br><span class="line">        var yearformatPart = resultYear[0];//匹配到的格式化字符</span><br><span class="line">        var yearVal = (this.getFullYear() + &quot;&quot;).substr(4 - yearformatPart.length);</span><br><span class="line">        fmt = fmt.replace(yearformatPart, yearVal);</span><br><span class="line">    &#125;</span><br><span class="line">    for (var k in o) &#123;</span><br><span class="line">        var re = new RegExp(&quot;(&quot; + k + &quot;)&quot;);</span><br><span class="line">        var re = re.exec(fmt);</span><br><span class="line">        if (re) &#123;</span><br><span class="line">            var Val = &quot;&quot; + o[k];//本次需要替换的数据 </span><br><span class="line">            var formatPart = re[0];//匹配到的格式化字符</span><br><span class="line">            var replaceVal = (formatPart.length == 1) ? (Val) : ((&quot;00&quot; + Val).substr(Val.length));</span><br><span class="line">            fmt = fmt.replace(formatPart, replaceVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊值判断"><a href="#特殊值判断" class="headerlink" title="特殊值判断"></a>特殊值判断</h3><p><strong>NaN</strong> 这个特殊的数值也可以使用 <strong>Object.is()</strong> 方法来判断。</p><p>并且在这个方法中还可以判断 <strong>+0</strong> 和 <strong>-0</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.is(NaN, NaN)); //true</span><br><span class="line">console.log(Object.is(+0, -0)); //false</span><br><span class="line">console.log(Object.is(+0, 0)); //true</span><br><span class="line">console.log(Object.is(0, -0)); //false</span><br></pre></td></tr></table></figure><h3 id="正则式"><a href="#正则式" class="headerlink" title="正则式"></a>正则式</h3><p><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html">JavaScript RegExp 对象 | 菜鸟教程 (runoob.com)</a></p><p>正则表达式表单验证实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*是否带有小数*/</span></span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">isDecimal</span>(<span class="params">strValue </span>)  &#123;  </span><br><span class="line">   <span class="keyword">var</span>  objRegExp= <span class="regexp">/^\d+\.\d+$/</span>;</span><br><span class="line">   <span class="keyword">return</span>  objRegExp.<span class="title function_">test</span>(strValue);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*校验是否中文名称组成 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ischina</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> reg=<span class="regexp">/^[\u4E00-\u9FA5]&#123;2,4&#125;$/</span>;   <span class="comment">/*定义验证表达式*/</span></span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);     <span class="comment">/*进行验证*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*校验是否全由8位数字组成 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isStudentNo</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> reg=<span class="regexp">/^[0-9]&#123;8&#125;$/</span>;   <span class="comment">/*定义验证表达式*/</span></span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);     <span class="comment">/*进行验证*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*校验电话码格式 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isTelCode</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> reg= <span class="regexp">/^((0\d&#123;2,3&#125;-\d&#123;7,8&#125;)|(1[3584]\d&#123;9&#125;))$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*校验邮件地址是否合法 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IsEmail</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> reg=<span class="regexp">/^\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\.[a-z]&#123;2,4&#125;)&#123;1,3&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则捕获，转换时间格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const str = &#x27;20210426141823&#x27;;</span><br><span class="line">const s = str.replace(/(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)/, (_, ...args) =&gt; &#123;</span><br><span class="line">  const [year, month, day, h, d, s] = args;</span><br><span class="line">  return `$&#123;year&#125;年$&#123;month&#125;月$&#123;day&#125; $&#123;h&#125;时$&#123;d&#125;分$&#123;s&#125;秒`</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(s);</span><br><span class="line">// 2021年04月26 14时18分23秒</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * [reg 百度网盘链接匹配]</span><br><span class="line"> * 说明：匹配支持百度分享的两种链接格式</span><br><span class="line"> * 格式一：链接: https://pan.baidu.com/s/15gzY8h3SEzVCfGV1xfkJsQ 提取码: vsuw 复制这段内容后打开百度网盘手机App，操作更方便哦</span><br><span class="line"> * 格式二：http://pan.baidu.com/share/link?shareid=179436&amp;uk=3272055266 提取码: vsuw 复制这段内容后打开百度网盘手机App，操作更方便哦</span><br><span class="line"> * 匹配出下载地址和提取码，并且还支持如果没有提取码，也能匹配出下载链接。</span><br><span class="line"> * @type &#123;正则表达式&#125;</span><br><span class="line"> * @return array 返回匹配成功的链接和地址</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function baiduDownLinkArr( string )&#123;</span><br><span class="line">  var reg = /([http|https]*?:\/\/pan\.baidu\.com\/[(?:s\/)&#123;0,1&#125;|(share)]*(?:[0-9a-zA-Z?=&amp;])+)(?:.+:(?:\s)*)?([a-zA-Z]&#123;4&#125;)?/;</span><br><span class="line">  console.log(reg.exec(string));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML5-表单属性"><a href="#HTML5-表单属性" class="headerlink" title="HTML5 表单属性"></a>HTML5 表单属性</h3><p><a href="https://www.runoob.com/html/html5-form-attributes.html">HTML5 表单属性 | 菜鸟教程 (runoob.com)</a></p><h3 id="多表单使用同一验证函数问题"><a href="#多表单使用同一验证函数问题" class="headerlink" title="多表单使用同一验证函数问题"></a>多表单使用同一验证函数问题</h3><p>上面用 js 表单验证判断表单字段(fname)值是否存在，如果想多个表单都使用同一个函数调用，传入参数后功能会失效，希望有大佬能解决这个问题。</p><p>现在我在网上找到的替代方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function validateForm(form) &#123;</span><br><span class="line">    var x = form.name.value;</span><br><span class="line">    if (x == null || x == &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;输入不能为空！&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有表单调用时都使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onsubmit=&quot;return validateForm(this)&quot;</span><br></pre></td></tr></table></figure><p>经验证好使。</p><h3 id="事件属性为什么有return-func"><a href="#事件属性为什么有return-func" class="headerlink" title="事件属性为什么有return func()"></a>事件属性为什么有return func()</h3><p><strong>onsubmit&#x3D;”return validateForm()”</strong> 为什么不是 <strong>onsubmit&#x3D;”validateForm()”</strong> ？？</p><p><strong>onsubmit&#x3D;”validateForm()”</strong> 能够调用 <strong>validateForm()</strong> 对表单进行验证，但是在验证不通过的情况下，并不能阻止表单提交。</p><p><strong>onsubmit&#x3D;”return validateForm()”</strong> 当验证不通过时，返回 false，可以阻止表单提交。</p><p>为何？</p><p>原来 onsubmit 属性就像是 <form> 这个 html 对象的一个方法名，其值（一字符串）就是其方法体，默认返回 true；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onsubmit=&quot;return validateForm()&quot;</span><br></pre></td></tr></table></figure><p>相当于:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Form.prototype.onsubmit = function() &#123;</span><br><span class="line">    return validateForm()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样复写了 onsubmit 的默认方法（默认返回 true），根据 validateForm() 的结果返回 true 或 false，当验证不通过时，返回 false，onsubmit&#x3D;”return false;” 阻止表单提交。</p><h3 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h3><p>getElementsByTagName 和 getElementsByClassName 这两个方法查找多个 dom 元素，返回的是 htmlcollection 类型，是伪数组而不是真数组，故不能使用数组的方法。<br>我们可以使用数组原型配合 slice 方法，利用 call，apply，bind 方法将伪数组转为真数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> y=x.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y)<span class="comment">//在控制台我们可以看到原型proto为htmlcollection，是伪数组</span></span><br><span class="line"><span class="comment">//伪数组转为真数组方法1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(y))<span class="comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//伪数组转为真数组方法2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(y))<span class="comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//伪数组转为真数组方法3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">bind</span>(y)())<span class="comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span></span><br></pre></td></tr></table></figure><h2 id="一些疑问"><a href="#一些疑问" class="headerlink" title="一些疑问"></a>一些疑问</h2><h5 id="Q：HTML输出流？JavaScript可以直接写入HTML输出流中，为什么只能在-HTML-输出中使用-document-write？在文档加载后使用该方法，会覆盖整个文档？"><a href="#Q：HTML输出流？JavaScript可以直接写入HTML输出流中，为什么只能在-HTML-输出中使用-document-write？在文档加载后使用该方法，会覆盖整个文档？" class="headerlink" title="Q：HTML输出流？JavaScript可以直接写入HTML输出流中，为什么只能在 HTML 输出中使用 document.write？在文档加载后使用该方法，会覆盖整个文档？"></a>Q：HTML输出流？JavaScript可以直接写入HTML输出流中，为什么只能在 HTML 输出中使用 document.write？在文档加载后使用该方法，会覆盖整个文档？</h5><p>注意：绝对不要在文档(DOM)加载完成之后使用 document.write()。这会覆盖该文档。</p><h5 id="Q：怎么在测试的时候把本地图片插入到HTML中？"><a href="#Q：怎么在测试的时候把本地图片插入到HTML中？" class="headerlink" title="Q：怎么在测试的时候把本地图片插入到HTML中？"></a>Q：怎么在测试的时候把本地图片插入到HTML中？</h5><p>比如本地文件名为 eg_mouse,本地地址为C:\Users\xushiyu\Desktop,插入语句&lt;img src&#x3D;”file:&#x2F;&#x2F;C:&#x2F;Users&#x2F;xushiyu&#x2F;Desktop&#x2F;eg_mouse.jpg”</p><p>注意三点</p><ul><li>必须在语句中加入”file:&#x2F;&#x2F;“。</li><li>本地路径为C:\Users\xushiyu\Desktop，注意要将”&quot;该换为”&#x2F;“。</li><li>文件格式.jpg不能忘记。<br>原文链接：<a href="https://blog.csdn.net/CSDNQINGRU/article/details/78503663">https://blog.csdn.net/CSDNQINGRU/article/details/78503663</a></li></ul><h5 id="Q：问题分析：当JS文件放在head标签里中时，并且绑定了onclick事件，就出现了Uncaught-TypeError-Cannot-set-properties-of-null-setting-‘onclick’-错误"><a href="#Q：问题分析：当JS文件放在head标签里中时，并且绑定了onclick事件，就出现了Uncaught-TypeError-Cannot-set-properties-of-null-setting-‘onclick’-错误" class="headerlink" title="Q：问题分析：当JS文件放在head标签里中时，并且绑定了onclick事件，就出现了Uncaught TypeError: Cannot set properties of null (setting ‘onclick’)错误"></a>Q：问题分析：当JS文件放在head标签里中时，并且绑定了onclick事件，就出现了Uncaught TypeError: Cannot set properties of null (setting ‘onclick’)错误</h5><p><strong>原因：</strong>W3School中介绍浏览器先加载完按钮节点才执行JS，当浏览器自顶向下解析时，找不到onclick绑定的按钮节点了</p><p>解决方案<a href="https://blog.csdn.net/wls666/article/details/89281458">(259条消息) 解决Uncaught TypeError: Cannot set property ‘onclick’ of null错误的方法_全栈工匠的博客-CSDN博客</a></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      
        <tags>
            
            <tag> 知识技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.22-5.28周计划</title>
      <link href="/2023/05/23/5-22-5-28%E5%91%A8%E8%AE%A1%E5%88%92/"/>
      <url>/2023/05/23/5-22-5-28%E5%91%A8%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 周计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP理论与BASE理论</title>
      <link href="/2023/05/23/CAP%E7%90%86%E8%AE%BA%E4%B8%8EBASE%E7%90%86%E8%AE%BA/"/>
      <url>/2023/05/23/CAP%E7%90%86%E8%AE%BA%E4%B8%8EBASE%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>分布式系统应用广泛起来，大型网站多是分布式。但分布式系统的难点之一是各个节点的状态如何保持一致。</p><p>处理数据一致性问题考虑的理论是CAP理论</p><p>BASE定理来源是CAP中一致性和可用性的权衡结果，来自大规模互联网分布式系统的总结。<br>核心思想是即使无法做到强一致性，但是每个应用可以根据自身的业务特定，采用合适的方式来达到最终一致性。</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>CAP名称对应分布式系统的单个指标：</p><p>C consistency 一致性：所有节点访问同一份最新的数据副本，强调<u>数据是正确的</u></p><blockquote><p>Consistency: Every read receives the most recent write or an error.</p></blockquote><p>A availability 可用性：客户端的任何请求都能得到响应，不会返回响应错误，但不保证数据是最新的，强调<u>不出错</u></p><blockquote><p>Availability: Every request receives a (non-error) response - without the guarantee that it contains the most recent write.</p></blockquote><p>P partition tolerance 分区容忍性：当任意数量的消息丢失或延迟到达时系统仍会继续提供服务，强调系统<u>不停止服务</u></p><blockquote><p>Partition tolerance: The system continus to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes.</p></blockquote><p>CAP理论的内容：一个分布式系统不能同时满足C，A，P。经典的图述如下：</p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230707194212957.png" alt="image-20230707194212957" style="zoom:50%;" /><p>（CA即是单机模式）</p><h3 id="举例理解C和A"><a href="#举例理解C和A" class="headerlink" title="举例理解C和A"></a>举例理解C和A</h3><p>如图所示一个简单的分布式系统：</p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230708094450178.png" alt="分布式系统示意图" style="zoom:50%;" /><p>满足一致性C，即两台服务器种的数据是一样的，数据库1的内容和数据库2的一致。</p><p>满足可用性A，即当客户端有请求时，不管是请求哪一台服务器，客户端都会得到立即响应。</p><p><strong>注意</strong>：CAP理论的C !&#x3D; 事务ACID特性的C</p><h3 id="CAP三者的冲突"><a href="#CAP三者的冲突" class="headerlink" title="CAP三者的冲突"></a>CAP三者的冲突</h3><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230708095259849.png" alt="image-20230708095259849" style="zoom:50%;" /><p>假设分布式系统的服务间之间的网络断开了，但仍要满足分区容错性（即保证系统还能用）。</p><p>如果用户向服务器1发送<strong>更新数据</strong>的请求，此时数据库1里的数据将被更新，假设更新前数据库1和数据库2的数据时一致的，都是data0，更新的数据为data0，那么更新完的情况为</p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230708095836568.png" alt="image-20230708095836568" style="zoom:33%;" /><p>若有用户向服务器2发送数据请求，由于网络故障数据库数据未同步，数据库2无法为用户反馈最新的数据data1，有两种选择：</p><ul><li>保证可用性，响应旧的数据data0给用户</li><li>保证一致性，阻塞等待，直到数据更新操作完成后在给用户响应</li></ul><h3 id="用CAP理论分析分布式系统"><a href="#用CAP理论分析分布式系统" class="headerlink" title="用CAP理论分析分布式系统"></a>用CAP理论分析分布式系统</h3><p>对于一个分布式系统而言，网络分区故障常常是不可避免的，所以<strong>P是前提必须保证</strong>，因为只要有网络交互就一定会有延迟和数据丢失，这种状况我们必须接受，必须保证系统不能挂掉。所以只剩下C、A可以选择。要么保证数据一致性（保证数据绝对正确），要么保证可用性（保证系统不出错）。</p><p>当选择了C（一致性）时，如果由于网络分区而无法保证特定信息是最新的，则系统将返回错误或超时。</p><p>当选择了A（可用性）时，系统将始终处理客户端的查询并尝试返回最新的可用的信息版本，即使由于网络分区而无法保证其是最新的。</p><ul><li>对于NoSQL数据库，更注重可用性——<strong>AP</strong></li><li>对于分布式关系型数据库系统，更注重一致性——<strong>CP</strong>。但常常分布式关系型数据库有着<strong>高可用性</strong>的需求，一般具备五个9（99.999%）以上的高可用性→<strong>CP+HA</strong>，产生了两个广泛应用的指标<ul><li>RPO(Recovery Point Objective)：恢复点目标，指数据库在灾难发生后会丢失多长时间的数据。分布式关系型数据库RPO&#x3D;0。</li><li>RTO(Recovery Time objective)：恢复时间目标，指数据库在灾难发生后到整个系统恢复正常所需要的时间。分布式关系型数据库RTO&lt;几分钟。</li></ul></li></ul><h2 id="BASE定理"><a href="#BASE定理" class="headerlink" title="BASE定理"></a>BASE定理</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>BASE即<strong>Basically Available</strong>(基本可用)、<strong>Soft state</strong>(软状态)和<strong>Eventually consistent</strong>(最终一致性)</p><p>Basically Available：完全可用和完全不可用的折中，折中下可通过延迟响应、流量削峰等手段保障系统核心功能正常</p><p>Soft state：可变动的状态，强调的是数据状态处于一种临界状态（在确定与不确定之间？），<strong>一种短暂的临时状态</strong>？在最终一致性的系统中，读出来的数据不一定是最新的。</p><p>Eventually consistent：最终一致性的系统不承诺写入数据成功后，能立即从系统中读出最新的数据，也不承诺具体多久之后可以读到最新的数据，而是<strong>尽可能保障特定时间级别之后的数据可用</strong>。</p><h3 id="确保基本可用的措施"><a href="#确保基本可用的措施" class="headerlink" title="确保基本可用的措施"></a>确保基本可用的措施</h3><p>一个正常的系统，不可用的情况，除了网络和硬件的原因外，多半是由于<strong>过载</strong>引起的。 过载的流量可能是短暂的，如果我们不加以控制，就可能会压垮系统，就要求我们要对流量进行控制来保障系统的可用性。</p><ul><li>削峰填谷</li></ul><p>如果流量的数据我们可以控制，比如我们在做个抢购，不同的商品我们可以错开抢购时间减少系统的压力；这样就避免了大量的流量突发到系统中，从而压垮系统；</p><p>如果我们无法控制流量，那我们可以将数据保存到队列中的方式。我们系统可以根据自己处理能力，来消费队列数据，从而达到削峰填谷的目的。</p><ul><li>延迟响应</li></ul><p>刚才的削峰填谷利用到了队列，对用户的请求不直接处理，而是缓存起来，慢慢处理，处理完毕后再返回，这对用户来说响应被延迟了，但是系统却可以处理更多的用户请求，这也是保证系统基本可用的一种手段。</p><ul><li>服务降级</li></ul><p>服务降级体现了基本可用的基本所在，在超系统负载的大流量过来之后，我们牺牲系统非必要的功能，比如降低日志级别，比如显示分辨率更低的图片等手段，来降低系统的资源消耗，保证核心能力的正常运行，这也是保证系统基本可用手段。</p><ul><li>过载保护</li></ul><p>如果以上手段，还是无法应对现在的流量，只能进入过载保护截断了，系统根据自己的能力抛弃超时的请求，或者随机抛弃一些请求，直接返回错误。这是比较狠的，比较粗暴直接的手段来保证系统的可用。</p><h3 id="确保最终一致性的措施"><a href="#确保最终一致性的措施" class="headerlink" title="确保最终一致性的措施"></a>确保最终一致性的措施</h3><p>存在最终一致性的系统，显然是存在多个副本的，通过多个副本来保证系统的可用性。在网络中不同的节点存在同一个副本，那就会存在副本数据的不一致问题，因为网络复制必然会存在延迟，当然我们可以等所有的副本数据都同步完成后再进行返回给客户端，但是那样系统的性能必然比较低，而且一旦一个副本所在的节点断开了，系统就无法响应了，可用性都难以保证了。</p><p>所以在一致性要求不严格的情况下，我们多采用最终一致性，那最终又是通过上面手段来保证的那，是如果修复不同的副本数据那。</p><ul><li>写时修复</li></ul><p>其实这是能想到的最直接的方式，在多个副本写的时候，如果其中一个写失败了，就缓存起来，系统自动通过重试的手段进行修复。 在我看来，写时修复，更快达到最终一致性，因为修复动作离写操作最近。 而且写时修复不需要进行数据对比，所以性能最好。</p><ul><li>读时修复</li></ul><p>我们在写数据的时候不关心失败还是成功，只是在读数据的时候，我们可以同时读多个节点的同一份数据，然后根据一定的规则，比如以超过半数的数据值为准的办法，来决定返回的值，如果我们写的时候也按照一定规则的话（比如写要超过半数的节点），我们就可以任务这个数据值是正确的，以这个值为准修复刚才不是这个值的节点。 比如 Cassandra 的 Read Repair 模式下，读时候发现数据不一致的时候会自动修复。</p><ul><li>异步修复</li></ul><p>通过定时不同节点比对的方式，来对照数据是否需要修复，如果需要修复，则进行同步。 这种修复方式，由于涉及到数据的比对，所以性能不是很好。<u>（？为什么这里的异步效果会差）</u></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>Base理论的主要思想就是竭尽全力的保证系统<strong>可用性</strong>，期间允许数据副本之间出现数据不一致的情况，只要最终能达到数据一致性就好。所以很明显，如果产品追求的是可用性，那么base理论就很合适，但是如果是金融项目，涉及到钱这一块，那么强一致性才是重中之重。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/50990721">轻松理解CAP理论 - 知乎 (zhihu.com)</a></p><p><a href="https://www.bilibili.com/video/BV1Rb4y1W7CD/?share_source=copy_web&vd_source=037002f55e8828cd76cb47f1f834f313">10分钟搞懂CAP理论</a></p><p><a href="https://zhuanlan.zhihu.com/p/268441621">分布式基础-BASE理论 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 知识技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql语句程序示例</title>
      <link href="/2023/05/23/mysql%E8%AF%AD%E5%8F%A5%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B/"/>
      <url>/2023/05/23/mysql%E8%AF%AD%E5%8F%A5%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="mybatis配置"><a href="#mybatis配置" class="headerlink" title="mybatis配置"></a>mybatis配置</h1><p>假设已经安装配置好了</p><p>mybatis的核心配置文件在resources目录下，名为Mybatis-config.xml，有模板，整体代码框架如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里要写入连接mysql数据库的信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2023&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里要写sql映射--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--userMapper.xml文件实现mapper代理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xml文件名可更改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;[Projectname]/Mapper/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XXXMapper-xml"><a href="#XXXMapper-xml" class="headerlink" title="XXXMapper.xml"></a>XXXMapper.xml</h1><p>以文件名userMapper.xml为例，一般是</p><p>要实现Mapper代理需要建一个和userMapper.xml同名的接口，在该接口中存放与userMapper.xml中SQL语言一样的抽象方法，要这个接口和userMapper.xml所在的目录要相同（？？？我的并没有）</p><p>userMapper.xml整体代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kinroy.Mapper.userMapper&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kinroy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectzhangsan&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kinroy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user where name=&#x27;张三&#x27;;</span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与其同名接口的整体代码：（我的架构对应的应该是UserDao）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.kinroy.Mapper;</span><br><span class="line"> </span><br><span class="line">import com.kinroy.pojo.User;</span><br><span class="line"> </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">public interface userMapper &#123;</span><br><span class="line">    List&lt;User&gt; selectall();</span><br><span class="line">    User selectzhangsan();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>SQL (Structured Query Language)：结构化查询语句</p><p>SQL常用的三部分：数据查询语言DQL，数据操作语言DML，数据定义语言DDL</p><p>DQL：常见保留字SELECT，WHERE，ORDER BY，GROUP BY，HAVING</p><p>DML：常见动词INSERT，UPDATE，DELETE</p><p>DBMS (Database Management System) ：数据库管理系统</p><p>DBA (Database Administration) ：数据库管理员，保障DBMS正常高效运行</p><h2 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL:           </span><br><span class="line">INT              整型</span><br><span class="line">BIGINT           长整型</span><br><span class="line">DECIMAL          浮点数</span><br><span class="line">DATE/DATETIME    日期</span><br><span class="line">VARCHAR          字符串</span><br></pre></td></tr></table></figure><p>其他<a href="https://www.runoob.com/mysql/mysql-data-types.html">MySQL 数据类型 | 菜鸟教程 (runoob.com)</a></p><h2 id="管理操作"><a href="#管理操作" class="headerlink" title="管理操作"></a>管理操作</h2><p>先了解文件结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|-连接</span><br><span class="line">|--database1 </span><br><span class="line">|---table1</span><br><span class="line">|---table2</span><br><span class="line">|---table3</span><br><span class="line">|--database2</span><br><span class="line">|---table1</span><br><span class="line">|--database3</span><br><span class="line">|---table1</span><br><span class="line">|---table2</span><br><span class="line">|---table3</span><br><span class="line">|---table4</span><br><span class="line">|-连接</span><br></pre></td></tr></table></figure><p>命令行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">use &lt;数据库名&gt;; 切换数据库</span><br><span class="line">show databases;查看数据库列表</span><br><span class="line">create database &lt;数据库名&gt;; 创建数据库</span><br><span class="line">drop database &lt;数据库名&gt;; 删除数据库</span><br><span class="line">alter database &lt;数据库名&gt; &lt;操作&gt;;修改数据库</span><br><span class="line"></span><br><span class="line">drop table &lt;表名&gt;; 删除表 注意是drop不是delete delete用于删表记录</span><br><span class="line"></span><br><span class="line">show tables;查看当前数据库下所有表</span><br><span class="line">show columns from &lt;表名&gt;;显示表的属性</span><br><span class="line">show index from &lt;表名&gt;;显示表的详细索引信息，包括主键</span><br><span class="line"></span><br><span class="line">show table status from &lt;数据库名&gt;;   显示数据库中所有表的信息</span><br><span class="line">show table status from &lt;数据库名&gt; like &#x27;runoob%&#x27;;表名以runoob开头的表的信息</span><br><span class="line">show table status from &lt;数据库&gt; like &#x27;runoob%&#x27;\G;   加上\G，查询结果按列打印(可能会出错去掉分号就可以了，\G 和分号 ; 的作用相似，两者取其一即可)</span><br><span class="line"></span><br><span class="line">show grants;查看当前用户的权限</span><br><span class="line"></span><br><span class="line">show variables like &quot;%character%&quot;; 查看编码方式</span><br><span class="line">set character_set_server = utf8; 设置编码方式</span><br><span class="line">create database name character set utf8; 创建表的时候设置编码</span><br><span class="line">alter database name character set utf8; 修改数据库成utf8的.</span><br><span class="line">alter table type character set utf8; 修改表默认用utf8.</span><br><span class="line">alter table type modify type_name varchar(50) CHARACTER SET utf8; 修改字段用utf8</span><br></pre></td></tr></table></figure><p>修改编码一：手动</p><p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230524193022800.png" alt="image-20230524193022800"></p><p>修改方式二：修改默认 配置文件<a href="https://blog.csdn.net/haduwi/article/details/107134679">(250条消息) Mysql 5.7 修改中文字符编码_10Alexander01的博客-CSDN博客</a></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p><strong>注意</strong>：F6在Navicat Premium里可以打开命令行操作，试一下命令行操作</p><p><strong>注意</strong>：password() 加密函数已经在 8.0.11 中移除了，可以使用 MD5() 函数代替</p><p><strong>注意：</strong>在注意需要执行 <strong>FLUSH PRIVILEGES</strong> 语句。 这个命令执行后会重新载入授权表。若不执行该命令，无法使用新创建的用户来连接mysql服务器，除非你重启mysql服务器</p><p><strong>注意</strong>：MySQL 的SQL语句以分号 (;) 作为结束标识</p><p>可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 ‘Y’ 即可</p><p>添加用户的实例，用户名为用户名为guest，密码为123456，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO user </span><br><span class="line">          (host, user, authentication_string, </span><br><span class="line">           select_priv, insert_priv, update_priv) </span><br><span class="line">           VALUES (&#x27;localhost&#x27;, &#x27;guest&#x27;, </span><br><span class="line">           PASSWORD(&#x27;123456&#x27;), &#x27;Y&#x27;, &#x27;Y&#x27;, &#x27;Y&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.20 sec)</span><br><span class="line">**某些属性会不允许是空或无默认值，安装提示加属性填值就行**</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT host, user, password FROM user WHERE user = &#x27;guest&#x27;;</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| host      | user    | password         |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| localhost | guest | 6f8c114b58f2ce9e |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>另外一种添加用户的方法为通过SQL的 GRANT 命令，以下命令会给指定数据库TUTORIALS添加用户 zara ，密码为 zara123 ，下面的命令会在mysql数据库中的user表创建一条用户信息记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt; ON TUTORIALS.*</span><br><span class="line">    -&gt; TO &#x27;zara&#x27;@&#x27;localhost&#x27;</span><br><span class="line">    -&gt; IDENTIFIED BY &#x27;zara123&#x27;;</span><br></pre></td></tr></table></figure><p>grant 普通 DBA 管理某个 MySQL 数据库的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on testdb to dba@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure><p>其中，关键字 <strong>privileges</strong> 可以省略。</p><p>grant 高级 DBA 管理 MySQL 中所有数据库的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to dba@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h3><p>非空约束 NOT NULL</p><p>设置列的默认值 DEFAULT</p><p>唯一约束 UNIQUE （不允许值存在重复）</p><p>主键约束 PRIMARY KEY（非空且唯一）</p><p>主键自增长 AUTO_INCERMENT</p><p>外键约束 FOREIGN KEY （A表的外键列必须参考B表的主键列）</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table &lt;表名&gt; (column_name1 column_type1 [some constraints], column_name2 column_type2,...);</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists `example` (</span><br><span class="line">`id` int unsigned auto_increment,</span><br><span class="line">`title` varchar(100) not null,</span><br><span class="line">`author` varchar(40) not null,</span><br><span class="line">`date` date,</span><br><span class="line">primary key(`id`)</span><br><span class="line">)engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不是单引号</p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE runoob_tbl(</span><br><span class="line">    -&gt; runoob_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; runoob_title VARCHAR(100) NOT NULL,</span><br><span class="line">    -&gt; runoob_author VARCHAR(40) NOT NULL,</span><br><span class="line">    -&gt; submission_date DATE,</span><br><span class="line">    -&gt; PRIMARY KEY ( runoob_id )</span><br><span class="line">    -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>注意：创建表的时候可以加个检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &lt;表名&gt;; </span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="SQL-INSERT-INTO"><a href="#SQL-INSERT-INTO" class="headerlink" title="SQL: INSERT INTO"></a>SQL: INSERT INTO</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：数据是字符型时必须使用单引号或者双引号，如“wuwawawa”</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO runoob_tbl </span><br><span class="line">(runoob_title, runoob_author, submission_date)</span><br><span class="line">VALUES</span><br><span class="line">(&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：上述实例中没有提供 runoob_id 的数据，因为该字段在创建表的时候已经设置它为 AUTO_INCREMENT(自动增加)属性。 所以，该字段会自动递增而不需要我们去设置。</p><p><strong>注意</strong>：实例中 NOW()是一个 MySQL 函数，该函数返回日期和时间。</p><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO runoob_tbl</span><br><span class="line">VALUES</span><br><span class="line">(0,&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候，可以写为<strong>0</strong>或者<strong>null</strong>，这样添加数据可以自增， 从而可以添加全部数据，而不用特意规定那几列添加数据。</p><h4 id="Springboot中"><a href="#Springboot中" class="headerlink" title="Springboot中"></a>Springboot中</h4><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="SQL：SELECT"><a href="#SQL：SELECT" class="headerlink" title="SQL：SELECT"></a>SQL：SELECT</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name </span><br><span class="line">[as otherName]</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]  #有AND OR BETWEEN...AND like in(...)</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br><span class="line">[LIMIT offset, num_record]</span><br><span class="line">[ORDER BY column_name [desc/asc(倒序/升序)]]</span><br></pre></td></tr></table></figure><ul><li>查询语句中可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li><li>使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>使用 WHERE 语句来包含任何条件。</li><li>使用 LIMIT 属性来设定返回的记录数。</li><li>通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from runoob_tbl;</span><br></pre></td></tr></table></figure><p>分页功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from _table limit (page_number-1)*lines_perpage, lines_perpage</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">select * from _table limit lines_perpage offset (page_number-1)*lines_perpage</span><br></pre></td></tr></table></figure><p>关联查询</p><p>分为左关联和右关联</p><p>左关联: <code>left join ... on ...</code></p><p>右关联:<code>right join... on ...</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表1 left join 表2 on  条件 (一般为表1与表2的关联条件)</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select user.username,orders.id,count(*) </span><br><span class="line">from user left join orders </span><br><span class="line">on user.id = orders.user_id </span><br></pre></td></tr></table></figure><h4 id="Springboot中-1"><a href="#Springboot中-1" class="headerlink" title="Springboot中"></a>Springboot中</h4><h3 id="筛选语句"><a href="#筛选语句" class="headerlink" title="筛选语句"></a>筛选语句</h3><h4 id="SQL：WHERE子句"><a href="#SQL：WHERE子句" class="headerlink" title="SQL：WHERE子句"></a>SQL：WHERE子句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p><p><strong>注意</strong>： WHERE 子句的字符串比较是不区分大小写的，可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写的</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from runoob_tbl WHERE runoob_author=&#x27;菜鸟教程&#x27;;</span><br><span class="line">SELECT * from runoob_tbl WHERE BINARY runoob_author=&#x27;RUNOOB.COM&#x27;;</span><br></pre></td></tr></table></figure><h4 id="Springboot上"><a href="#Springboot上" class="headerlink" title="Springboot上"></a>Springboot上</h4><h3 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h3><h4 id="SQL：UPDATE语句"><a href="#SQL：UPDATE语句" class="headerlink" title="SQL：UPDATE语句"></a>SQL：UPDATE语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE runoob_tbl SET runoob_title=&#x27;学习 C++&#x27; WHERE runoob_id=3;</span><br></pre></td></tr></table></figure><p>当需要将字段中的特定字符串（子串）批量修改为其他字符串时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field=REPLACE(field, &#x27;old-string&#x27;, &#x27;new-string&#x27;) </span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><h4 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h4><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><h4 id="SQL：DELETE语句"><a href="#SQL：DELETE语句" class="headerlink" title="SQL：DELETE语句"></a>SQL：DELETE语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure><p>（？？？是只删记录吗？删了之后表还存在吗？）</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM runoob_tbl WHERE runoob_id=3;</span><br></pre></td></tr></table></figure><blockquote><p>delete，drop，truncate 都有删除表的作用，区别在于：</p><ul><li>1、delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除，打个比方，delete 是单杀，truncate 是团灭，drop 是把电脑摔了。</li><li>2、delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和 drop 是 DDL 语句，操作完马上生效，不能回滚，打个比方，delete 是发微信说分手，后悔还可以撤回，truncate 和 drop 是直接扇耳光说滚，不能反悔。</li><li>3、执行的速度上，<strong>drop&gt;truncate&gt;delete</strong>，打个比方，drop 是神舟火箭，truncate 是和谐号动车，delete 是自行车。</li></ul></blockquote><h4 id="Springboot-1"><a href="#Springboot-1" class="headerlink" title="Springboot"></a>Springboot</h4><h3 id="匹配语句"><a href="#匹配语句" class="headerlink" title="匹配语句"></a>匹配语句</h3><h4 id="SQL：LIKE子句"><a href="#SQL：LIKE子句" class="headerlink" title="SQL：LIKE子句"></a>SQL：LIKE子句</h4><p> LIKE即模糊匹配</p><ul><li>**%**字符来表示任意字符，如果没有使用 **%**， LIKE 子句与等号 <strong>&#x3D;</strong> 的效果是一样的</li><li>**_**字符匹配单个字符</li><li>**[]**匹配括号所列的字符中的一个，指定一个字符、字符串或范围</li><li>**[^]**匹配不在括号所列之内的单个字符</li></ul><p>正则表达式<a href="https://www.runoob.com/mysql/mysql-regexp.html">MySQL 正则表达式 | 菜鸟教程 (runoob.com)</a></p><p>规则示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x27;%a&#x27;     //以a结尾的数据</span><br><span class="line">&#x27;a%&#x27;     //以a开头的数据</span><br><span class="line">&#x27;%a%&#x27;    //含有a的数据</span><br><span class="line">&#x27;_a_&#x27;    //三位且中间字母是a的</span><br><span class="line">&#x27;_a&#x27;     //两位且结尾字母是a的</span><br><span class="line">&#x27;a_&#x27;     //两位且开头字母是a的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ELECT field1, field2,...fieldN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &#x27;somevalue&#x27;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from runoob_tbl  WHERE runoob_author LIKE &#x27;%COM&#x27;;</span><br></pre></td></tr></table></figure><h4 id="Springboot-2"><a href="#Springboot-2" class="headerlink" title="Springboot"></a>Springboot</h4><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><h4 id="SQL：UNION操作符"><a href="#SQL：UNION操作符" class="headerlink" title="SQL：UNION操作符"></a>SQL：UNION操作符</h4><p>UNION 操作符用于连接两个以上的 SELECT 语句的<strong>结果</strong>组合到一个<strong>结果集合</strong>中</p><ul><li><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。<strong>默认情况下 UNION 操作符已经删除了重复数据</strong>，所以 DISTINCT 修饰符对结果没啥影响。</li><li><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT country FROM Websites</span><br><span class="line">UNION</span><br><span class="line">SELECT country FROM apps</span><br></pre></td></tr></table></figure><h4 id="Sprintboot"><a href="#Sprintboot" class="headerlink" title="Sprintboot"></a>Sprintboot</h4><h3 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h3><h4 id="SQL：ORDER-BY子句"><a href="#SQL：ORDER-BY子句" class="headerlink" title="SQL：ORDER BY子句"></a>SQL：ORDER BY子句</h4><p>使用 <strong>ASC</strong> 或 <strong>DESC</strong> 关键字来设置查询结果是按<strong>升序</strong>或<strong>降序</strong>排列。 默认情况下，它是按升序排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from runoob_tbl ORDER BY submission_date ASC;</span><br></pre></td></tr></table></figure><p>注意：gbk（汉字编码字符集）直接ORDER对拼音进行排序，如果用的是utf8需要先转码才能达到拼音排序的效果<code>CONVERT(runoob_title using gbk)</code></p><h4 id="Springboot-3"><a href="#Springboot-3" class="headerlink" title="Springboot"></a>Springboot</h4><h3 id="分组操作"><a href="#分组操作" class="headerlink" title="分组操作"></a>分组操作</h3><h4 id="SQL：GROUP-BY语句"><a href="#SQL：GROUP-BY语句" class="headerlink" title="SQL：GROUP BY语句"></a>SQL：GROUP BY语句</h4><p>在分组的列上我们可以使用 COUNT, SUM, AVG等函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, COUNT(*) FROM   employee_tbl GROUP BY name;</span><br><span class="line">SELECT name, SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">SELECT coalesce(name, &#x27;总数&#x27;), SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br></pre></td></tr></table></figure><p>可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select coalesce(a,b,c);</span><br></pre></td></tr></table></figure><p>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!&#x3D;null,则选择a；如果a b c 都为null ，则返回为null</p><h4 id="Springboot-4"><a href="#Springboot-4" class="headerlink" title="Springboot"></a>Springboot</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h3><p>在两个或多个表中查询数据</p><h4 id="SQL：JOIN语句"><a href="#SQL：JOIN语句" class="headerlink" title="SQL：JOIN语句"></a>SQL：JOIN语句</h4><p>可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询，JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN或JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li><li><strong>LEFT JOIN（左连接）：</strong>获取左表所有记录，即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul><p>示例：</p><p>内连接</p><p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230527103931614.png" alt="image-20230527103931614"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class="line">&lt;==&gt;</span><br><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</span><br></pre></td></tr></table></figure><p>左连接</p><p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230527103943783.png" alt="image-20230527103943783"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br></pre></td></tr></table></figure><p>右连接</p><p><img src="C:\Users\Anne\AppData\Roaming\Typora\typora-user-images\image-20230527104023885.png" alt="image-20230527104023885"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br></pre></td></tr></table></figure><h4 id="Springboot-5"><a href="#Springboot-5" class="headerlink" title="Springboot"></a>Springboot</h4><h3 id="NULL值处理"><a href="#NULL值处理" class="headerlink" title="NULL值处理"></a>NULL值处理</h3><h4 id="SQL：IS-NULL-amp-IS-NOT-NULL操作符"><a href="#SQL：IS-NULL-amp-IS-NOT-NULL操作符" class="headerlink" title="SQL：IS NULL &amp; IS NOT NULL操作符"></a>SQL：IS NULL &amp; IS NOT NULL操作符</h4><p>MySQL提供了三大运算符:</p><ul><li><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true。</li><li><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</li><li><strong>&lt;&#x3D;&gt;:</strong> 比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</li></ul><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 &#x3D; NULL 或 !&#x3D; NULL 在列中查找 NULL 值 。</p><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 NULL，即 NULL &#x3D; NULL 返回 NULL 。</p><p>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><p>ifnull(columnName2,0)：若columnName2有值为NULL时转为0</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM runoob_test_tbl WHERE runoob_count IS NULL;</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><p>修改数据表名或者修改数据表字段</p><h4 id="SQL：ALTER命令"><a href="#SQL：ALTER命令" class="headerlink" title="SQL：ALTER命令"></a>SQL：ALTER命令</h4><p>如下命令使用了 ALTER 命令及 DROP 子句来删除以上创建表的 i 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl  DROP i;</span><br></pre></td></tr></table></figure><p>如果数据表中只剩余一个字段则无法使用DROP来删除字段。</p><p>MySQL 中使用 ADD 子句来向数据表中添加列，如下实例在表 testalter_tbl 中添加 i 字段，并定义数据类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;</span><br></pre></td></tr></table></figure><p>如果你需要指定新增字段的位置，可以使用MySQL提供的关键字 FIRST (设定位第一列)， AFTER 字段名（设定位于某个字段之后）。</p><p>尝试以下 ALTER TABLE 语句, 在执行成功后，使用 SHOW COLUMNS 查看表结构的变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl DROP i;</span><br><span class="line">ALTER TABLE testalter_tbl ADD i INT FIRST;</span><br><span class="line">ALTER TABLE testalter_tbl DROP i;</span><br><span class="line">ALTER TABLE testalter_tbl ADD i INT AFTER c;</span><br></pre></td></tr></table></figure><p>FIRST 和 AFTER 关键字可用于 ADD 与 MODIFY 子句，所以如果你想重置数据表字段的位置就需要先使用 DROP 删除字段然后使用 ADD 来添加字段并设置位置。</p><p>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</p><p>例如，把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10);</span><br></pre></td></tr></table></figure><p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;</span><br><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT;</span><br></pre></td></tr></table></figure><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p><p>以下实例，指定字段 j 为 NOT NULL 且默认值为100 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl </span><br><span class="line">    -&gt; MODIFY j BIGINT NOT NULL DEFAULT 100;</span><br></pre></td></tr></table></figure><p>如果你不设置默认值，MySQL会自动设置该字段默认为 NULL。</p><p>你可以使用 ALTER 来修改字段的默认值，尝试以下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;</span><br><span class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| c     | char(1) | YES  |     | NULL    |       |</span><br><span class="line">| i     | int(11) | YES  |     | 1000    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>你也可以使用 ALTER 命令及 DROP子句来删除字段的默认值，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;</span><br><span class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| c     | char(1) | YES  |     | NULL    |       |</span><br><span class="line">| i     | int(11) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">Changing a Table Type:</span><br></pre></td></tr></table></figure><p>修改数据表类型，可以使用 ALTER 命令及 TYPE 子句来完成。尝试以下实例，我们将表 testalter_tbl 的类型修改为 MYISAM ：</p><p><strong>注意：</strong>查看数据表类型可以使用 SHOW TABLE STATUS 语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ENGINE = MYISAM;</span><br><span class="line">mysql&gt;  SHOW TABLE STATUS LIKE &#x27;testalter_tbl&#x27;\G</span><br><span class="line">*************************** 1. row ****************</span><br><span class="line">           Name: testalter_tbl</span><br><span class="line">           Type: MyISAM</span><br><span class="line">     Row_format: Fixed</span><br><span class="line">           Rows: 0</span><br><span class="line"> Avg_row_length: 0</span><br><span class="line">    Data_length: 0</span><br><span class="line">Max_data_length: 25769803775</span><br><span class="line">   Index_length: 1024</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: 2007-06-03 08:04:36</span><br><span class="line">    Update_time: 2007-06-03 08:04:36</span><br><span class="line">     Check_time: NULL</span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果需要修改数据表的名称，可以在 ALTER TABLE 语句中使用 RENAME 子句来实现。</p><p>尝试以下实例将数据表 testalter_tbl 重命名为 alter_tbl：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;</span><br></pre></td></tr></table></figure><p>ALTER 命令还可以用来创建及删除MySQL数据表的索引，该功能我们会在接下来的章节中介绍。</p><h3 id="Mysql事务处理"><a href="#Mysql事务处理" class="headerlink" title="Mysql事务处理"></a>Mysql事务处理</h3><p>保证ACID原则</p><p>MYSQL 事务处理主要有两种方法：</p><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p><ul><li><strong>SET AUTOCOMMIT&#x3D;0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT&#x3D;1</strong> 开启自动提交</li></ul><p>示例<a href="https://www.runoob.com/mysql/mysql-transaction.html">MySQL 事务 | 菜鸟教程 (runoob.com)</a></p><h3 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h3><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p><p>建立索引会占用磁盘空间的索引文件。</p><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><p>创建索引，没有任何限制的普通索引.如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX indexName ON table_name (column_name(length))</span><br></pre></td></tr></table></figure><p>修改表结构&#x2F;添加索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br></pre></td></tr></table></figure><p>也可以在创建表的时候直接指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytable(  </span><br><span class="line">    ID INT NOT NULL,   </span><br><span class="line">    username VARCHAR(16) NOT NULL,  </span><br><span class="line">    INDEX [indexName] (username(length))  </span><br><span class="line">);  </span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX [indexName] ON mytable; </span><br></pre></td></tr></table></figure><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>唯一索引和普通索引的区别是索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX indexName ON mytable(username(length)) </span><br></pre></td></tr></table></figure><p>修改表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table mytable ADD UNIQUE [indexName] (username(length))</span><br></pre></td></tr></table></figure><p>创建表的时候直接指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytable(  </span><br><span class="line">    ID INT NOT NULL,   </span><br><span class="line">    username VARCHAR(16) NOT NULL,  </span><br><span class="line">    UNIQUE [indexName] (username(length))  </span><br><span class="line">);  </span><br></pre></td></tr></table></figure><h4 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h4><p>有四种方式来添加数据表的索引：</p><ul><li><strong>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list)</strong>:该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li><li><strong>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</strong> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li><li><strong>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</strong> 添加普通索引，索引值可出现多次。</li><li>**ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):**该语句指定了索引为 FULLTEXT ，用于全文索引。</li></ul><h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3><p>临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class="line">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class="line">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class="line">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">CREATE TEMPORARY TABLE 临时表名 AS</span><br><span class="line">(</span><br><span class="line">    SELECT *  FROM 旧的表名</span><br><span class="line">    LIMIT 0,10000</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当你使用 <strong>SHOW TABLES</strong>命令显示数据表列表时，你将无法看到 SalesSummary表。</p><p>如果你退出当前MySQL会话，再使用 <strong>SELECT</strong>命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP TABLE SalesSummary;</span><br></pre></td></tr></table></figure><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 使用 SHOW CREATE TABLE 命令获取创建数据表(CREATE TABLE) 语句，该语句包含了原数据表的结构，索引等。</span><br><span class="line">SHOW CREATE TABLE &lt;待复制的表&gt;;</span><br><span class="line">例如要复制user表，能拿到如下信息：</span><br><span class="line">| user  | CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 |</span><br><span class="line"></span><br><span class="line">2. 复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。</span><br><span class="line">CREATE TABLE `clone_user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 如果你想复制表的内容，你就可以使用 INSERT INTO ... SELECT 语句来实现。</span><br><span class="line">INSERT INTO clone_user (</span><br><span class="line">id,</span><br><span class="line">username,</span><br><span class="line">password)</span><br><span class="line">SELECT id, username, password</span><br><span class="line">FROM user;</span><br></pre></td></tr></table></figure><p>另一种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE targetTable LIKE sourceTable;</span><br><span class="line">INSERT INTO targetTable SELECT * FROM sourceTable;</span><br><span class="line"></span><br><span class="line">也可以对拷贝的信息进行选择</span><br><span class="line">CREATE TABLE newadmin AS</span><br><span class="line">(</span><br><span class="line">    SELECT username, password FROM admin</span><br><span class="line">)</span><br><span class="line">改名</span><br><span class="line">CREATE TABLE newadmin AS</span><br><span class="line">(  </span><br><span class="line">    SELECT id, username AS uname, password AS pass FROM admin</span><br><span class="line">)</span><br><span class="line">定义复制表的字段信息</span><br><span class="line">CREATE TABLE newadmin</span><br><span class="line">(</span><br><span class="line">    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY</span><br><span class="line">)</span><br><span class="line">AS</span><br><span class="line">(</span><br><span class="line">    SELECT * FROM admin</span><br><span class="line">)  </span><br></pre></td></tr></table></figure><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>MySQL以下三种信息：</p><ul><li><strong>查询结果信息：</strong> SELECT, UPDATE 或 DELETE语句影响的记录数。</li><li><strong>数据库和数据表的信息：</strong> 包含了数据库及数据表的结构信息。</li><li><strong>MySQL服务器信息：</strong> 包含了数据库服务器的当前状态，版本号等。</li></ul><p>以下命令语句可以在 MySQL 的命令提示符使用，也可以在脚本中 使用，如PHP脚本。</p><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SELECT VERSION( )</td><td align="left">服务器版本信息</td></tr><tr><td align="left">SELECT DATABASE( )</td><td align="left">当前数据库名 (或者返回空)</td></tr><tr><td align="left">SELECT USER( )</td><td align="left">当前用户名</td></tr><tr><td align="left">SHOW STATUS</td><td align="left">服务器状态</td></tr><tr><td align="left">SHOW VARIABLES</td><td align="left">服务器配置变量</td></tr></tbody></table><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p><strong>重置序列</strong>：当删了记录后需要重新排列，要注意ACID的问题，如果在删除的同时又有新记录添加，有可能会出现数据混乱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE clone_user DROP id;</span><br><span class="line">mysql&gt; ALTER TABLE clone_user </span><br><span class="line">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class="line">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure><p>(就是删了原字段及其数据，重建了一下)</p><p><strong>设置序列初始值</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; PRIMARY KEY (id),</span><br><span class="line">    -&gt; name VARCHAR(30) NOT NULL, </span><br><span class="line">    -&gt; date DATE NOT NULL,</span><br><span class="line">    -&gt; origin VARCHAR(30) NOT NULL</span><br><span class="line">)engine=innodb auto_increment=100 charset=utf8;</span><br></pre></td></tr></table></figure><p>也可以在表创建成功后，通过以下语句来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><a href="https://www.runoob.com/mysql/mysql-functions.html">MySQL 函数 | 菜鸟教程 (runoob.com)</a></p><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h4><p>使用函数创建自增序列管理表(批量使用自增表,设置初始值,自增幅度)</p><p>???<a href="https://www.runoob.com/mysql/mysql-using-sequences.html">MySQL 序列使用 | 菜鸟教程 (runoob.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION IF EXISTS currval; </span><br><span class="line">DELIMITER $ </span><br><span class="line">CREATE FUNCTION currval (seq_name VARCHAR(50)) </span><br><span class="line">RETURNS INTEGER</span><br><span class="line">LANGUAGE SQL </span><br><span class="line">DETERMINISTIC </span><br><span class="line">CONTAINS SQL </span><br><span class="line">SQL SECURITY DEFINER </span><br><span class="line">COMMENT &#x27;&#x27;</span><br><span class="line">BRGIN</span><br><span class="line">DECLARE value INTEGER; </span><br><span class="line">SET value = 0; </span><br><span class="line">SELECT current_value INTO value </span><br><span class="line">FROM sequence</span><br><span class="line">WHERE name = seq_name; </span><br><span class="line">RETURN value;</span><br><span class="line">END</span><br><span class="line">$ </span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure><h3 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h3><p><strong>防止出现重复数据</strong>：指定字段为主键或唯一（PRIMARY KEY 或 UNIQUE）来保证数据唯一性</p><p>INSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。</p><p>添加一个 UNIQUE 索引，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name CHAR(20) NOT NULL,</span><br><span class="line">   last_name CHAR(20) NOT NULL,</span><br><span class="line">   sex CHAR(10),</span><br><span class="line">   UNIQUE (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>统计重复数据</strong>：</p><p>HAVING子句设置重复数大于1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name</span><br><span class="line">    -&gt; FROM person_tbl</span><br><span class="line">    -&gt; GROUP BY last_name, first_name</span><br><span class="line">    -&gt; HAVING repetitions &gt; 1 and 其他条件;</span><br></pre></td></tr></table></figure><p><strong>过滤重复数据</strong>：</p><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DISTINCT last_name, first_name</span><br><span class="line">    -&gt; FROM person_tbl;</span><br></pre></td></tr></table></figure><p>你也可以使用 GROUP BY 来读取数据表中不重复的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT last_name, first_name</span><br><span class="line">    -&gt; FROM person_tbl</span><br><span class="line">    -&gt; GROUP BY (last_name, first_name);</span><br></pre></td></tr></table></figure><p><strong>删除重复数据</strong>：</p><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tmp SELECT last_name, first_name, sex FROM person_tbl  GROUP BY (last_name, first_name, sex);</span><br><span class="line">mysql&gt; DROP TABLE person_tbl;</span><br><span class="line">mysql&gt; ALTER TABLE tmp RENAME TO person_tbl;</span><br></pre></td></tr></table></figure><p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER IGNORE TABLE person_tbl</span><br><span class="line">    -&gt; ADD PRIMARY KEY (last_name, first_name);</span><br></pre></td></tr></table></figure><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p><strong>永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</strong></p><p>防止SQL注入，我们需要注意以下几个要点：</p><ul><li>1.永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双”-“进行转换等。</li><li>2.永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li><li>3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li><li>5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>6.sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</li></ul><p>以对用户输入的数据进行转义</p><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><p>将数据表 runoob_tbl 数据导出到 &#x2F;tmp&#x2F;runoob.txt 文件中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM runoob_tbl </span><br><span class="line">    -&gt; INTO OUTFILE &#x27;/tmp/runoob.txt&#x27;;</span><br></pre></td></tr></table></figure><p>你可以通过命令选项来设置数据输出的指定格式，以下实例为导出 CSV 格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM passwd INTO OUTFILE &#x27;/tmp/runoob.txt&#x27;</span><br><span class="line">    -&gt; FIELDS TERMINATED BY &#x27;,&#x27; ENCLOSED BY &#x27;&quot;&#x27;</span><br><span class="line">    -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;</span><br></pre></td></tr></table></figure><p>在下面的例子中，生成一个文件，各值用逗号隔开。这种格式可以被许多程序使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;</span><br><span class="line">FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;</span><br><span class="line">LINES TERMINATED BY &#x27;\n&#x27;</span><br><span class="line">FROM test_table;</span><br></pre></td></tr></table></figure><p>注意：输出不能是一个已存在的文件。防止文件数据被篡改。</p><p>mysqldump其他操作<a href="https://www.runoob.com/mysql/mysql-database-export.html">MySQL 导出数据 | 菜鸟教程 (runoob.com)</a></p><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p><a href="https://www.runoob.com/mysql/mysql-database-import.html">MySQL 导入数据 | 菜鸟教程 (runoob.com)</a></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><a href="https://www.runoob.com/mysql/mysql-operator.html">MySQL 运算符 | 菜鸟教程 (runoob.com)</a></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="mybatisX插件"><a href="#mybatisX插件" class="headerlink" title="mybatisX插件"></a>mybatisX插件</h2><h2 id="sql语句执行顺序"><a href="#sql语句执行顺序" class="headerlink" title="sql语句执行顺序"></a>sql语句执行顺序</h2><p>上面执行顺序有误。谷歌来的顺序是这样的</p><ol><li>FROM, including JOINs</li><li>WHERE</li><li>GROUP BY</li><li>HAVING</li><li>WINDOW functions</li><li>SELECT</li><li>DISTINCT</li><li>UNION</li><li>ORDER BY</li><li>LIMIT and OFFSET</li></ol><h2 id="导入操作？"><a href="#导入操作？" class="headerlink" title="导入操作？"></a>导入操作？</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 知识技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.15-5.21周计划</title>
      <link href="/2023/05/15/5-15-5-21%E5%91%A8%E8%AE%A1%E5%88%92/"/>
      <url>/2023/05/15/5-15-5-21%E5%91%A8%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="总任务"><a href="#总任务" class="headerlink" title="总任务"></a>总任务</h2><ul><li><input checked="" disabled="" type="checkbox"> 答辩PPT初稿</li><li><input checked="" disabled="" type="checkbox"> 论文语言通顺 根据盲审结果修改</li><li><input disabled="" type="checkbox"> 做好总结工作</li><li><input checked="" disabled="" type="checkbox"> Java会用 能跑起来项目先 理清楚关系</li><li><input disabled="" type="checkbox"> 英语&#x2F;日语训练</li><li><input disabled="" type="checkbox"> 文献阅读100篇（乐</li><li><input disabled="" type="checkbox"> 掉3斤</li><li><input disabled="" type="checkbox"> 每周汇报 确定汇报时间</li><li><input disabled="" type="checkbox"> ……</li></ul><h2 id="日计划"><a href="#日计划" class="headerlink" title="日计划"></a>日计划</h2><table><thead><tr><th></th><th>5.15</th><th>5.16</th><th>5.17</th><th>5.18</th><th>5.19</th><th>5.20</th><th>5.21</th></tr></thead><tbody><tr><td>搭建blog</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>英语</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>日语</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>文献阅读</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>微信读书</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>论文修改</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>组会&#x2F;汇报</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>答辩准备</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>java&#x2F;来福</td><td></td><td></td><td></td><td>√</td><td></td><td></td><td></td></tr><tr><td>写好日计划</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>锻炼</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>早睡</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td></tr></tbody></table><h2 id="总结签"><a href="#总结签" class="headerlink" title="总结签"></a>总结签</h2><p>废了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 周计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>来福：20230509会议记录及分工</title>
      <link href="/2023/05/09/%E6%9D%A5%E7%A6%8F%EF%BC%9A20230509%E4%BC%9A%E8%AE%AE%E8%AE%B0%E5%BD%95%E5%8F%8A%E5%88%86%E5%B7%A5/"/>
      <url>/2023/05/09/%E6%9D%A5%E7%A6%8F%EF%BC%9A20230509%E4%BC%9A%E8%AE%AE%E8%AE%B0%E5%BD%95%E5%8F%8A%E5%88%86%E5%B7%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="0509汇报"><a href="#0509汇报" class="headerlink" title="0509汇报"></a>0509汇报</h2><p>设计组：如何设计一个美观的网页</p><p>运行组：</p><p>开发组：</p><ul><li>java代码学习-mybatis（把mysql语言转化成java）-增删改查的功能</li><li>springboot</li></ul><h2 id="java学习"><a href="#java学习" class="headerlink" title="java学习"></a>java学习</h2><ul><li>JDK（Java Development Kit ）：编写Java程序的程序员使用的软件</li><li>JRE（Java Runtime Environment）：运行Java程序的用户使用的软件</li><li>Server JRE （Java SE Runtime Environment）：服务端使用的 Java 运行环境</li><li>SDK（Software Development Kit）：软件开发工具包，在Java中用于描述1998年~2006年之间的JDK</li><li>DAO（Data Access Object）：数据访问接口，数据访问，顾名思义就是与数据库打交道</li><li>MVC（Model View Controller）：模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用于组织代码用一种业务逻辑和数据显示分离的方法</li></ul><p>模板作用<br>main创建mian方法<br>psvm创建main方法<br>souf格式化输出<br>sout打印输出<br>soutm打印当前方法名称<br>soutp打印当前方法的参数<br>soutv打印当前最近的变量<br>fori创建for循环<br>forr创建倒序for循环(数组.forr)<br>ritar创建倒序for循环<br>iter增强for循环<br>ifn空值判断(null)<br>inn非空判断(null)<br>prsf创建私有静态常量<br>psf创建公开静态常量<br>psfi创建公开int类型常量<br>psfs创建公开String类型常量</p><p>快捷键介绍<br>Ctrl+F在当前文件进行文本查找(必备)<br>Ctrl+R在当前文件进行文本替换(必备)<br>Ctrl+Y删除光标所在行代码或者删除选中的行代码(必备)<br>Ctrl+D复制光标所在行代码或者复制选中的行代码(必备)<br>Ctrl+&#x2F;注释光标所在行代码或者注释选中的行代码(必备) 单行注释<br>Ctrl+Shift+&#x2F;注释光标所在行代码或者注释选中的行代码(必备) 多行注释<br>Alt+Enter提示快速修复代码的选择(光标要放在错误上) (必备)<br>F2跳转到程序报错的位置(必备)<br>Alt+Insert生成代码，生成 Getter、Setter、构造器等(必备)<br>Shift+Enter自动在当前光标位置下方开辟新的行(必备)<br>Ctrl+Alt+L格式化代码(与QQ热键冲突)(必备)<br>Shift+F10运行Java程序<br>Ctrl+Z撤销操作<br>Ctrl+Shift+Z还原操作(与搜狗输入法热键冲突)<br>Tab缩进代码<br>Shift + Tab取消缩进<br>Ctrl+ +展开当前方法<br>Ctrl + Shift + +展开所有方法<br>Ctrl+ -收起当前方法<br>Ctrl+ Shift + -收起所有方法<br>Ctrl+B查看当前类或者方法或者变量定义的位置(等同于按住Ctrl键+左键点击)<br>Ctrl+N根据指定的类名查找相关的类<br>Ctrl+O重写父类方法<br>Ctrl+I实现接口方法<br>Ctrl+H查看当前类结构<br>Ctrl+Alt+左右方向键切换到上一个或者下一个代码操作处<br>Alt + 左右方向键切换文件<br>Alt+ 上下方向键光标跳转到上一个方法处<br>Alt+Shift+上下方向键移动当前选择的代码<br>Ctrl+Shift+Enter自动在当前行末尾添加分号<br>按两下Shift弹出搜索弹窗</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/syc000666/article/details/125904935">https://blog.csdn.net/syc000666/article/details/125904935</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Little&#39;s Law &amp; Tail Latency</title>
      <link href="/2023/05/09/Little-s-Law-Tail-Latency/"/>
      <url>/2023/05/09/Little-s-Law-Tail-Latency/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Little’s-Law"><a href="#Little’s-Law" class="headerlink" title="Little’s Law"></a>Little’s Law</h2><h3 id="解决的目标问题"><a href="#解决的目标问题" class="headerlink" title="解决的目标问题"></a>解决的目标问题</h3><p>排队论</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>系统在稳定的状态下有</p><p>$L&#x3D;λW$</p><p>其中，$L$是系统内个体的平均数量，$λ$是个体到达平均速率，$W$是个体在系统中的平均停留时间。</p><h3 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h3><p>$1- 在稳定状态下的生产系统中，系统内部的平均在制品库存数$WIP$，等于系统的平均输出$TH$，乘以每个产品在系统内的平均周期时间$CT$，即$WIP &#x3D; TH · CT$</p><p>$2- Utilization Law 使用率的计算$U&#x3D;X∗St$，即使用率 &#x3D; 吞吐率 * 服务处理时间</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p>单一的系统部件：磁盘，CPU</p></li><li><p>多个子系统组成的复杂系统：网页界面相应时间</p></li><li><p>管理学</p></li><li><p>系统测试、软件性能分析：确保观察到的性能结果瓶颈是不是由测试设备造成的</p></li><li><p>制造业：根据生产率和在制品数量来预测交货时间</p></li><li><p>人员配置</p></li></ul><h2 id="Tail-Latency"><a href="#Tail-Latency" class="headerlink" title="Tail Latency"></a>Tail Latency</h2><p>即尾延迟。延迟有三种：low latency、middle latency、tail latency</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>长尾请求一般是指明显高于均值的那部分占比较小的请求。 业界关于延迟有一个常用的P99标准， 也就是99%的请求延迟要满足在一定耗时以内， 1%的请求会大于这个耗时， 而这1%就可以认为是长尾请求。</p><p>开发和运维高并发系统的工程师可能都有过类似经验，明明系统已经调优完毕，该异步的异步，该减少互斥的地方引入无锁，该减少IO的地方更换引擎或者硬件，该调节内核的调节相应参数，然而，如果在系统中引入实时监控，总会有少量响应的延迟高于均值，我们把这些响应称为尾延迟（Tail Latency）。尾部延迟（也称为高百分比延迟）是指客户端很少看到的高延迟。例如：“我的服务通常在10毫秒左右响应，但有时需要100毫秒左右”。</p><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><p>系统&#x2F;环境问题（磁盘老化）、超时、后台任务（GC）、超负荷运行、调度问题</p><h3 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h3><p>应对尾延迟的基本思想是hedging。最慢的实例决定我们的请求完成的时间。</p><ul><li>发送比必要更多的请求，只收集最快的返回，有助于减少尾部。Send 2 instread of 1. Send 11 instead of 10 (e.g. in erasure-coding 10 fragment reconstruct read). Send backup requests at 95% percentile latency.</li><li>金丝雀请求,，i.e. send normal requests but fallback to sending hedged requests if the canary did’t finish in reasonable time.</li><li>通常，较小的任务分区（微分区）将有助于实现更平滑的延迟分布百分位数。</li><li>减缓 head-of-line blocking. 少量开销较大的查询可能会增加大量并发开销较低的查询的延迟。Uniformly smaller tasks partitioning camn help.</li><li>处理超时<ul><li>首先尝试a non-block try 读取（读取但不等待），然后进行尽力读取（读取并等待超时）。</li><li>当发现超时时，将相关资源标记为known slow。 并告知其他请求绕过这个资源。</li><li>要设置合适的超时值，我们可以设置为99.9% ，并动态调整它。 任意超时值可能有害。</li></ul></li><li>更细粒度的调度，甚至是平衡延迟和成本的管理框架。(e.g. <a href="http://conferences.sigcomm.org/sigcomm/2013/papers/sigcomm/p219.pdf">Bing’s Kwiken</a>, also attached below.)</li></ul><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>有两种监控指标：</p><ul><li>Single operation</li><li>Percentile statistics</li></ul><p>监控应该能够：</p><ul><li>提供可以从用户请求入口跟踪到硬件操作的trace id</li><li>涵盖每个级别的细分</li><li>覆盖容易出问题的地方</li></ul><p>有几个方面需要监控：</p><ul><li>与故障直接相关的错误，例如虚拟机停止&#x2F;重新启动</li><li>直接影响用户体验的超时错误计数和自动限制</li><li>Operation slowdown</li><li>典型的硬件性能，如CPU、网络、磁盘</li><li>提供从用户进入的跟踪、每个级别的细分以及最终到硬件的跟踪</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://library.kiwix.org/viewer#wikipedia_en_all_nopic_2023-04/A/Little's_law">Little’s law (kiwix.org)</a></p><p>[2] Dean, Jeffrey, and Luiz André Barroso. “The tail at scale.” Communications of the ACM 56.2 (2013): 74-80.</p><p>[3] <a href="https://accelazh.github.io/storage/Tail-Latency-Study">https://accelazh.github.io/storage/Tail-Latency-Study</a></p><p>[4] <a href="https://www.jdon.com/56122.html">什么是尾部延迟？ (jdon.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 知识技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.8-5.14周计划</title>
      <link href="/2023/05/08/5-8-5-14%E5%91%A8%E8%AE%A1%E5%88%92/"/>
      <url>/2023/05/08/5-8-5-14%E5%91%A8%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>这周想重拾语言学习，有好久没认真学了，不学不行，逻辑表达退步了，说写的能力大不如从前。</p><h2 id="总任务"><a href="#总任务" class="headerlink" title="总任务"></a>总任务</h2><ul><li><input checked="" disabled="" type="checkbox"> 多邻国英语&amp;日语</li><li><input disabled="" type="checkbox"> 组会提问</li><li><input checked="" disabled="" type="checkbox"> 云计算文献综述5<del>10</del>篇</li><li><input disabled="" type="checkbox"> 论文语言修改</li><li><input checked="" disabled="" type="checkbox"> 搭建blog</li><li><input checked="" disabled="" type="checkbox"> 查看答辩PPT制作</li></ul><h2 id="日计划"><a href="#日计划" class="headerlink" title="日计划"></a>日计划</h2><table><thead><tr><th></th><th>5.8</th><th>5.9</th><th>5.10</th><th>5.11</th><th>5.12</th><th>5.13</th><th>5.14</th></tr></thead><tbody><tr><td>搭建blog</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>英语</td><td>√</td><td>√</td><td>√</td><td></td><td>√</td><td></td><td></td></tr><tr><td>日语</td><td></td><td></td><td></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>文献阅读</td><td>√</td><td></td><td></td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>微信读书</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>论文修改</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>组会</td><td></td><td>√</td><td>√</td><td></td><td></td><td></td><td></td></tr><tr><td>答辩PPT</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>锻炼锻炼</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>早睡（？</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="总结签"><a href="#总结签" class="headerlink" title="总结签"></a>总结签</h2><p>完事开头难（双手合十</p>]]></content>
      
      
      
        <tags>
            
            <tag> 周计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站：风和日丽的一天</title>
      <link href="/2023/05/08/%E5%BB%BA%E7%AB%99%EF%BC%9A%E9%A3%8E%E5%92%8C%E6%97%A5%E4%B8%BD%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
      <url>/2023/05/08/%E5%BB%BA%E7%AB%99%EF%BC%9A%E9%A3%8E%E5%92%8C%E6%97%A5%E4%B8%BD%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="爬"><a href="#爬" class="headerlink" title="爬"></a>爬</h2><p>我一直很想尝试一些前端的事情，但大学四年这样时间的机会甚少，课程作业基本围绕着系统和硬件，我对这些兴趣不大但课余时间也没利用起来去实践前端的内容。这次趁着毕设提交完建个栈做一些尝试，试着从系统向上爬一点点。</p><h2 id="记"><a href="#记" class="headerlink" title="记"></a>记</h2><p>我的兴趣很多，想尝试的也很多，有一些记录文件或资料，但大多混乱存储，没有个统一的存放地点又或者是我自己想起来记哪就记哪，觉得这样不好！！！（想回去找的时候要翻好多地方，晕倒）在blog里面大概就记录这几个方向吧：<strong>知识技术</strong>，<strong>学习总结</strong>，<strong>阶段汇报</strong>，<strong>项目经验</strong>，<strong>感悟闲聊</strong>。不知道能坚持多久，加油吧！</p><h2 id="望"><a href="#望" class="headerlink" title="望"></a>望</h2><p>希望可以进步！</p><p>希望共同成长！</p><p>希望自己不负厚望！</p><p>希望能够成为有实力的人！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
